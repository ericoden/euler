/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
*/

/*
Let N = p_1 ^ e_1 * p_2 ^ e_2 ... p_k ^ e_k be the prime factorization of
positive integer N. The number of factors of N is given by

(e_1 + 1) * (e_2 + 1) * ... * (e_k + 1)

Let T be the n^th triangular number (i.e., T = n * (n + 1) / 2). Observe that
T can be expressed as the product of two coprime integers, a and b. In
particular, if n is even, let a = n / 2 and b = (n + 1). If n is odd, let
a = n and b = (n + 1) / 2.

Since T = a * b, we can use the prime factorizations of a and b (which are
much smaller than T) in order to determine the number of factors of T.
*/

#include <iostream>
#include <vector>

std::vector<int> primeFactors(long int n)
{
    std::vector<int> result;
    int c = 2;
    while (n > 1)
    {
        if (n % c == 0)
        {
            result.push_back(c);
            // std::cout << c << " ";
            n /= c;
        }
        else
        {
            c++;
        }
    }
    return result;
}

std::vector<int> getExponents(std::vector<int> factors)
{
    int current_factor = 0;
    std::vector<int> exponents;
    int counter = 1;
    for (int i = 0; i < factors.size(); i++)
    {
        if (current_factor != factors[i])
        {
            exponents.push_back(counter);
            current_factor = factors[i];
            counter = 0;
        }
        counter++;
    }
    return exponents;
}

int main()
{
    // long int n = 714;
    // std::vector<int> factors = primeFactors(n);
    int a = 0;
    int b = 0;
    int n = 1;
    int T = 0;
    int num_factors = 1;
    std::vector<int> a_factors;
    std::vector<int> a_exponents;
    std::vector<int> b_factors;
    std::vector<int> b_exponents;
    bool flag = false;
    while (flag == false)
    {
        n++;
        num_factors = 1;
        T = n * (n + 1) / 2;
        if (n % 2 == 0)
        {
            a = n / 2;
            b = n + 1;
        }
        else
        {
            a = n;
            b = (n + 1) / 2;
        }
        a_factors = primeFactors(a);
        a_exponents = getExponents(a_factors);
        b_factors = primeFactors(b);
        b_exponents = getExponents(b_factors);

        for (int i = 0; i < a_exponents.size(); i++)
        {
            num_factors *= (a_exponents[i] + 1);
        }
        for (int i = 0; i < b_exponents.size(); i++)
        {
            num_factors *= (b_exponents[i] + 1);
        }
        std::cout << n << " " << T << " " << num_factors << std::endl;
        if (num_factors > 500)
        {
            flag = true;
        }
    }
    return 0;
}